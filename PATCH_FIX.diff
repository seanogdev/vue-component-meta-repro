--- packages/docs/node_modules/vue-component-meta/lib/base.js.backup	2025-10-05 18:08:57
+++ packages/docs/node_modules/vue-component-meta/lib/base.js	2025-10-05 18:09:12
@@ -169,7 +169,6 @@
     }
     function getMetaScriptContent(fileName) {
         let code = `
-import type { ComponentType, ComponentProps, ComponentEmit, ComponentSlots, ComponentExposed } from 'vue-component-meta/lib/helpers';
 import type * as Components from '${fileName.slice(0, -'.meta.ts'.length)}';
 
 export default {} as { [K in keyof typeof Components]: ComponentMeta<typeof Components[K]>; };
@@ -181,6 +180,12 @@
 	slots: ComponentSlots<T>;
 	exposed: ComponentExposed<T>;
 }
+
+type ComponentType<T> = T extends new (...args: any) => {} ? 1 : T extends (...args: any) => any ? 2 : 0;
+type ComponentProps<T> = T extends new (...args: any) => { $props: infer P; } ? NonNullable<P> : T extends (props: infer P, ...args: any) => any ? P : {};
+type ComponentSlots<T> = T extends new (...args: any) => { $slots: infer S; } ? NonNullable<S> : T extends new (...args: any) => { $scopedSlots: infer S; } ? NonNullable<S> : T extends (props: any, ctx: { slots: infer S; attrs: any; emit: any; }, ...args: any) => any ? NonNullable<S> : {};
+type ComponentEmit<T> = T extends new (...args: any) => { $emit: infer E; } ? NonNullable<E> : T extends (props: any, ctx: { slots: any; attrs: any; emit: infer E; }, ...args: any) => any ? NonNullable<E> : {};
+type ComponentExposed<T> = T extends new (...args: any) => infer E ? E : T extends (props: any, ctx: any, expose: (exposed: infer E) => any, ...args: any) => any ? NonNullable<E> : {};
 `.trim();
         return code;
     }
